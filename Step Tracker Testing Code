/*  STEP-TRACKER  (ESP32-C3  +  ADXL335  +  GC9A01A)
    Wheel-style menu
      • Clock Mode
      • Steps Count (with integrated pace bubble)
      • Calibrate ADXL
      • Live G (real-time X/Y/Z in g)
    Features:
      • 1-pole low-pass on |a|
      • 8-step cadence average
      • 4-state pace with debounce + idle timeout
*/

#include "SPI.h"
#include "Adafruit_GC9A01A.h"
#include <math.h>

/* ---------- USER SETTINGS ---------- */
float  stride_cm     = 70.0;   // personalise!
float  weight_kg     = 70.0;
const int    dailyGoal     = 8000;

/* WPIR thresholds (km h-1) */
const float walkJog         = 4.5;
const float jogRun          = 8.5;
const unsigned long idleTimeout = 2000;   // ms: no steps → “STANDING”

/* ---------- DISPLAY ---------- */
#define TFT_DC   10
#define TFT_CS   -1
#define TFT_RST  -1
Adafruit_GC9A01A tft(TFT_CS, TFT_DC);

#define BLACK    0x0000
#define WHITE    0xFFFF
#define GREEN    0x07E0
#define RED      0xF800
#define BLUE     0x001F
#define YELLOW   0xFFE0
#define GREY     0x8410      // mid-grey
#define DARKGREY 0x7BEF

/* ---------- PINS ---------- */
#define BUTTON_DOWN    20
#define BUTTON_UP      21
#define BUTTON_SELECT   9
#define ADXL_X         A1
#define ADXL_Y         A3
#define ADXL_Z         A0

/* ---------- MENU ---------- */
const char* menuItems[] = { "Clock Mode", "Steps Count", "Calibrate ADXL", "Live G" };
const char* menuIcons[] = { "CLK", "STP", "CAL", "GRA" };
const uint8_t menuLen = sizeof(menuItems) / sizeof(menuItems[0]);
uint8_t menuIdx = 0;

enum AppState { MENU, CLOCK, STEPS, CALIB, LIVEG };
AppState state = MENU;

/* ---------- BUTTON DEBOUNCE ---------- */
const uint16_t DB_MS = 50, LONG_MS = 800;
bool lastUD[2] = { HIGH, HIGH }, stabUD[2] = { HIGH, HIGH };
unsigned long edgeUD[2] = { 0, 0 };
bool selLast = LOW, selStable = LOW, longFired = false;
unsigned long selEdge = 0, selStart = 0;

bool pressUD(uint8_t i, uint8_t pin) {
  bool lv = digitalRead(pin);
  if (lv != lastUD[i]) {
    edgeUD[i] = millis();
    lastUD[i] = lv;
  }
  if (millis() - edgeUD[i] > DB_MS && lv != stabUD[i]) {
    stabUD[i] = lv;
    return lv == LOW;
  }
  return false;
}

/* ---------- RUNTIME VARS ---------- */
const uint8_t cx = 120, cy = 120, rad = 100;
uint8_t hh = 12, mm = 0, ss = 0;
float hA = 0, mA = 0, sA = 0;
int16_t pHX = cx, pHY = cy, pMX = cx, pMY = cy, pSX = cx, pSY = cy;

/* step detect & smoothing */
const float alpha = 0.30;
double zeroX = 0, zeroY = 0, zeroZ = 0;
double filtMag = 0;

/* cadence buffer (8-step average) */
const uint8_t CAD_BUF = 8;
unsigned long stepTS[CAD_BUF] = { 0 };
uint8_t stepHead = 0;
float cadenceSPM = 0;

/* step-detector tuning */
const double peakThreshold   = 1.20;   // g – minimum filtered magnitude for a peak
const double valleyThreshold = 1.00;   // g – must drop below to arm next step
const unsigned long stepCooldown = 200; // ms – min time between counts

enum StepState { STEP_IDLE, STEP_PEAK_DETECTED };
StepState stepState = STEP_IDLE;
unsigned long lastStep = 0, lastStepT = 0;
int stepCount = 0;

/* for Live G updates */
unsigned long lastG = 0;

/* ---------- DRAW WHEEL MENU ---------- */
void drawWheel() {
  tft.fillScreen(BLACK);
  const int16_t rIcon = 80;
  const float stepAng = 360.0 / menuLen;
  for (uint8_t i = 0; i < menuLen; i++) {
    int8_t off = (i - menuIdx + menuLen) % menuLen;
    float ang = radians(-90 + off * stepAng);
    int16_t x = cx + rIcon * cos(ang), y = cy + rIcon * sin(ang);
    uint8_t sz = (off == 0) ? 3 : 2;
    uint16_t col = (off == 0) ? GREEN : WHITE;
    tft.setTextSize(sz);
    tft.setTextColor(col, BLACK);
    int16_t w = strlen(menuIcons[i]) * 6 * sz;
    tft.setCursor(x - w/2, y - 4*sz);
    tft.print(menuIcons[i]);
  }
  tft.setTextSize(2);
  tft.setTextColor(WHITE, BLACK);
  int16_t w = strlen(menuItems[menuIdx]) * 12;
  tft.setCursor(cx - w/2, cy + 50);
  tft.print(menuItems[menuIdx]);
}

/* ---------- CLOCK ---------- */
void drawClockFace() {
  tft.drawCircle(cx, cy, rad, WHITE);
  for (uint8_t i = 1; i <= 12; i++) {
    float a = map(i, 1, 12, 0, 360);
    int x = cx + (rad - 20) * cos(radians(a - 90));
    int y = cy + (rad - 20) * sin(radians(a - 90));
    tft.setCursor(x - 8, y - 8);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.print(i);
  }
}
void hands() {
  tft.drawLine(cx, cy, pHX, pHY, BLACK);
  tft.drawLine(cx, cy, pMX, pMY, BLACK);
  tft.drawLine(cx, cy, pSX, pSY, BLACK);

  pHX = cx + (rad - 40) * cos(radians(hA - 90));
  pHY = cy + (rad - 40) * sin(radians(hA - 90));
  tft.drawLine(cx, cy, pHX, pHY, RED);

  pMX = cx + (rad - 20) * cos(radians(mA - 90));
  pMY = cy + (rad - 20) * sin(radians(mA - 90));
  tft.drawLine(cx, cy, pMX, pMY, BLUE);

  pSX = cx + (rad - 10) * cos(radians(sA - 90));
  pSY = cy + (rad - 10) * sin(radians(sA - 90));
  tft.drawLine(cx, cy, pSX, pSY, GREEN);
}

/* ---------- STEPS + MINI WPIR ---------- */
void showSteps() {
  // draw steps, distance, calories, goal bar
  float dist_km = (stepCount * stride_cm) / 100000.0;
  float kcal    = dist_km * weight_kg * 1.036;
  tft.fillScreen(BLACK);
  tft.setTextColor(WHITE);
  tft.setTextSize(3);
  tft.setCursor(30,  60); tft.print("Steps:");
  tft.setCursor(60, 100); tft.print(stepCount);
  tft.setTextSize(2);
  tft.setCursor(20, 140); tft.printf("Dist: %.2f km", dist_km);
  tft.setCursor(20, 160); tft.printf("Cal : %.0f", kcal);
  tft.fillRect(10, 210, 220, 10, DARKGREY);
  int w = map(min(stepCount, dailyGoal), 0, dailyGoal, 0, 220);
  tft.fillRect(10, 210, w, 10, GREEN);

  // compute pace state
  bool idle       = (millis() - lastStepT > idleTimeout);
  float speed_kmh = (stride_cm/100.0) * cadenceSPM * 0.06;
  uint8_t desired;
  if      (idle)                desired = 0;
  else if (speed_kmh > jogRun)  desired = 3;
  else if (speed_kmh > walkJog) desired = 2;
  else                           desired = 1;

  // debounce pace state
  static uint8_t  paceState = 0;
  static unsigned long stableSince = 0;
  if (desired != paceState) {
    if (millis() - stableSince > 600) {
      paceState = desired;
    }
  } else {
    stableSince = millis();
  }

  // draw mini-bubble
  static const uint16_t colLUT[4] = { GREY, GREEN, YELLOW, RED };
  static const char*    txtLUT[4] = { "STAND", "WALK", "JOGG", "RUN" };
  const uint8_t bx = 170, by = 70, br = 30;
  tft.fillCircle(bx, by, br, colLUT[paceState]);
  tft.setTextSize(1);
  tft.setTextColor(WHITE, BLACK);
  int16_t tx = bx - (strlen(txtLUT[paceState]) * 6 / 2);
  int16_t ty = by - 4;
  tft.setCursor(tx, ty);
  tft.print(txtLUT[paceState]);
}

/* ---------- CALIBRATION ---------- */
void calibrate() {
  struct F { const char* l; uint8_t p; double* s; } f[6] = {
    { "+X", ADXL_X, &zeroX }, { "-X", ADXL_X, &zeroX },
    { "+Y", ADXL_Y, &zeroY }, { "-Y", ADXL_Y, &zeroY },
    { "+Z", ADXL_Z, &zeroZ }, { "-Z", ADXL_Z, &zeroZ }
  };
  double pos[3] = {0}, neg[3] = {0};
  const uint16_t N = 100;
  const uint32_t wait = 5000;

  // collect + and - readings
  for (uint8_t i = 0; i < 6; i++) {
    tft.fillScreen(BLACK);
    tft.setTextSize(2);
    tft.setTextColor(WHITE);
    tft.setCursor(30, 60);
    tft.print("Face "); tft.print(f[i].l);
    tft.setCursor(10, 120);
    tft.print("Hold 5 s");
    unsigned long st = millis();
    while (millis() - st < wait) delay(1);

    double sum = 0;
    for (uint16_t s = 0; s < N; s++) {
      sum += analogRead(f[i].p);
      delay(5);
    }
    if (i % 2 == 0) pos[i/2] = sum / N;
    else           neg[i/2] = sum / N;
  }

  // compute zero-offsets
  zeroX = (pos[0] + neg[0]) / 2;
  zeroY = (pos[1] + neg[1]) / 2;
  zeroZ = (pos[2] + neg[2]) / 2;

  // show zero-offsets only
  tft.fillScreen(BLACK);
  tft.setTextSize(2);
  tft.setTextColor(WHITE);
  tft.setCursor(10,  40);
  tft.printf("X: %.0f (%.2fg)", zeroX, (zeroX-zeroX)/330.0);
  tft.setCursor(10,  70);
  tft.printf("Y: %.0f (%.2fg)", zeroY, (zeroY-zeroY)/330.0);
  tft.setCursor(10, 100);
  tft.printf("Z: %.0f (%.2fg)", zeroZ, (zeroZ-zeroZ)/330.0);

  delay(3000);
  state = MENU;
  drawWheel();
}

/* ---------- LIVE G SCREEN ---------- */
void showLiveG() {
  tft.fillScreen(BLACK);
  tft.setTextSize(2);
  tft.setTextColor(WHITE);
  tft.setCursor(10, 20);
  tft.print("Live G:");
}

/* ---------- SETUP ---------- */
void setup() {
  Serial.begin(115200);
  tft.begin();
  tft.setRotation(0);
  tft.fillScreen(BLACK);
  pinMode(BUTTON_DOWN, INPUT_PULLUP);
  pinMode(BUTTON_UP,   INPUT_PULLUP);
  pinMode(BUTTON_SELECT, INPUT_PULLDOWN);
  drawWheel();
}

/* ---------- LOOP ---------- */
void loop() {
  unsigned long now = millis();

  // 1. Wheel navigation
  bool up   = pressUD(0, BUTTON_UP);
  bool down = pressUD(1, BUTTON_DOWN);
  if (state == MENU) {
    if (down) { menuIdx = (menuIdx + 1) % menuLen; drawWheel(); }
    if (up)   { menuIdx = (menuIdx - 1 + menuLen) % menuLen; drawWheel(); }
  }

  // 2. SELECT handling
  bool selRaw = digitalRead(BUTTON_SELECT);
  if (selRaw != selLast) {
    selEdge = now; selLast = selRaw;
  }
  if (now - selEdge > DB_MS && selRaw != selStable) {
    selStable = selRaw;
    if (selStable == HIGH) {
      selStart = now; longFired = false;
    } else if (!longFired && now - selStart < LONG_MS) {
      if (state == MENU) {
        switch (menuIdx) {
          case 0: state = CLOCK; tft.fillScreen(BLACK); drawClockFace(); break;
          case 1: state = STEPS; stepCount = 0; showSteps(); break;
          case 2: state = CALIB; calibrate(); break;
          case 3: state = LIVEG; lastG = 0; showLiveG(); break;
        }
      } else if (state == STEPS) {
        stepCount = 0; showSteps();
      }
    }
  }
  if (selStable == HIGH && !longFired && now - selStart >= LONG_MS) {
    longFired = true;
    if (state != MENU) {
      state = MENU;
      drawWheel();
    }
  }

  // 3. Read ADXL & magnitude
  int xr = analogRead(ADXL_X), yr = analogRead(ADXL_Y), zr = analogRead(ADXL_Z);
  double xg = (xr - zeroX)/330.0, yg = (yr - zeroY)/330.0, zg = (zr - zeroZ)/330.0;
  double mag = sqrt(xg*xg + yg*yg + zg*zg);

  // 4. Low-pass filter
  filtMag = filtMag*(1.0 - alpha) + mag*alpha;

  // 5. Step detector state machine
  switch (stepState) {
    case STEP_IDLE:
      if (filtMag > peakThreshold) stepState = STEP_PEAK_DETECTED;
      break;
    case STEP_PEAK_DETECTED:
      if (filtMag < valleyThreshold && (now - lastStep) > stepCooldown) {
        stepCount++;
        lastStep = now;
        lastStepT = now;
        stepState = STEP_IDLE;
        if (state == STEPS) showSteps();
        // cadence buffer
        stepTS[stepHead] = now;
        stepHead = (stepHead + 1) % CAD_BUF;
        if (stepTS[stepHead]) {
          float avgInt = (now - stepTS[stepHead]) / float(CAD_BUF);
          cadenceSPM = 60000.0 / avgInt;
        }
      }
      break;
  }

  // 6. Clock update
  if (state == CLOCK) {
    static unsigned long tick = 0;
    if (now - tick >= 1000) {
      tick = now;
      if (++ss >= 60) {
        ss = 0;
        if (++mm >= 60) {
          mm = 0;
          if (++hh > 12) hh = 1;
        }
      }
      sA = map(ss, 0, 60, 0, 360);
      mA = map(mm, 0, 60, 0, 360);
      hA = map(hh % 12, 0, 12, 0, 360);
      hands();
    }
  }

  // 7. Live G updates
  if (state == LIVEG && now - lastG > 200) {
    lastG = now;
    tft.fillScreen(BLACK);
    tft.setTextSize(2);
    tft.setTextColor(WHITE);
    tft.setCursor(10, 20);
    tft.print("Live G:");
    tft.setCursor(10, 50);
    tft.printf("X: %6.3fg", xg);
    tft.setCursor(10, 80);
    tft.printf("Y: %6.3fg", yg);
    tft.setCursor(10,110);
    tft.printf("Z: %6.3fg", zg);
  }

  // 8. Serial debug
  Serial.print(xg,3); Serial.print('\t');
  Serial.print(yg,3); Serial.print('\t');
  Serial.print(zg,3); Serial.print('\t');
  Serial.println(filtMag,3);
}
