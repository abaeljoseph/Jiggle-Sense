/////////////////////////////// ENCODER DEBUGGER ///////////////////////////////////////////////
/////////////////////////////// ENCODER DEBUGGER ///////////////////////////////////////////////
/////////////////////////////// ENCODER DEBUGGER ///////////////////////////////////////////////
/*  Encoder-pin test  –  COM = 3 V 3 (HIGH = action)
    CLK → GPIO20  (INPUT_PULLDOWN)
    DT  → GPIO21  (INPUT_PULLDOWN)
    SW  → GPIO9   (INPUT_PULLDOWN)   // HIGH while pressed
    Ext LED → GPIO3 (active-LOW, 50-ms pulse)
    On-board LED → GPIO8 (active-HIGH when button pressed)
*/

#define ENC_A        20
#define ENC_B        21
#define BTN_SW       9
#define EXT_LED_IO   3          // external indicator, active-LOW
#define ONBOARD_LED  8          // on-board LED (active-HIGH on most C3 dev boards)

void setup() {
  Serial.begin(115200);

  pinMode(ENC_A, INPUT_PULLUP);
  pinMode(ENC_B, INPUT_PULLUP);
  pinMode(BTN_SW, INPUT_PULLDOWN);

  pinMode(EXT_LED_IO, OUTPUT);  digitalWrite(EXT_LED_IO, HIGH);  // off
  pinMode(ONBOARD_LED, OUTPUT); digitalWrite(ONBOARD_LED, LOW);  // off

  Serial.println(F("Rotate / press – LOW idle, HIGH action (button lights LED8)"));
}

void loop() {
  static uint8_t  prevA = 0, prevB = 0, prevSW = 0;
  static uint32_t extLedOffAt = 0;
  static uint32_t lastPrint   = 0;

  /* read inputs */
  uint8_t a  = digitalRead(ENC_A);
  uint8_t b  = digitalRead(ENC_B);
  uint8_t sw = digitalRead(BTN_SW);          // HIGH while pressed

  /* drive on-board LED (GPIO 8) */
  digitalWrite(ONBOARD_LED, sw);             // HIGH = pressed, LOW = released

  /* pulse external LED when any input toggles */
  if (a != prevA || b != prevB || sw != prevSW) {
    digitalWrite(EXT_LED_IO, LOW);           // LED on (active-LOW)
    extLedOffAt = millis() + 50;             // 50-ms pulse
    prevA = a;  prevB = b;  prevSW = sw;
  }
  if (extLedOffAt && millis() >= extLedOffAt) {
    digitalWrite(EXT_LED_IO, HIGH);          // LED off
    extLedOffAt = 0;
  }

  /* print every 10 ms */
  if (millis() - lastPrint >= 10) {
    lastPrint = millis();
    Serial.printf("%u %u %u\r\n", a, b, sw);
    //            | | |_____ 1 = button pressed (on-board LED lit)
    //            | |________ 1-pulses when DT active
    //            |__________ 1-pulses when CLK active
  }
}



///////////////////////////////////// ADXL DEBUGGER ///////////////////////////////////////////////
///////////////////////////////////// ADXL DEBUGGER ///////////////////////////////////////////////
///////////////////////////////////// ADXL DEBUGGER ///////////////////////////////////////////////
#define ADXL_X A1
#define ADXL_Y A0
#define ADXL_Z A3

void setup() {
  Serial.begin(115200);
  // ESP32 ADC setup:
  analogReadResolution(12);                // 0–4095
  analogSetPinAttenuation(ADXL_X, ADC_11db);
  analogSetPinAttenuation(ADXL_Y, ADC_11db);
  analogSetPinAttenuation(ADXL_Z, ADC_11db);
}

void loop() {
  int xRaw = analogRead(ADXL_X);
  int yRaw = analogRead(ADXL_Y);
  int zRaw = analogRead(ADXL_Z);

  // compute voltage (for sanity)
  float xV = xRaw * 3.3f / 4095.0f;
  float yV = yRaw * 3.3f / 4095.0f;
  float zV = zRaw * 3.3f / 4095.0f;

  // map raw→g
  float xG = map(xRaw, 0, 4095, -3000, 3000) / 1000.0;
  float yG = map(yRaw, 0, 4095, -3000, 3000) / 1000.0;
  float zG = map(zRaw, 0, 4095, -3000, 3000) / 1000.0;

  Serial.printf("Raw: %4d,%4d,%4d  V: %0.2f,%0.2f,%0.2f  G: %0.1fG,%0.1fG,%0.1fG\n",
                xRaw, yRaw, zRaw, xV, yV, zV, xG, yG, zG);
  delay(200);
}



